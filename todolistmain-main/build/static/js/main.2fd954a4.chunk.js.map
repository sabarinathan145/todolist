{"version":3,"sources":["trash.svg","App.js","serviceWorkerRegistration.js","index.js"],"names":["ListItem","props","className","itemData","isComplete","onClick","mark","index","description","src","trashIcon","deleteTask","alt","App","useState","taskInput","updateTaskInput","toDolist","updateToDoList","addNote","push","newList","filter","item","i","list","value","onKeyDown","event","keyCode","onChange","target","length","map","toDoObject","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2fd954a4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/trash.435750a2.svg\";","import React,{ useState} from 'react';\nimport trashIcon from './trash.svg';\n\n\nfunction App() {\n  const [taskInput, updateTaskInput] = useState(\"\");\n  const [toDolist, updateToDoList] = useState([]);\n \n  const inputKeyDown = (event) =>{\n    if (event.keyCode===13)\n    addNote();\n  }\n  const addNote = () =>{\n    toDolist.push({description: taskInput, isComplete:false})\n    updateToDoList(toDolist)\n    updateTaskInput(\"\")\n  }\n  \n \n  const deleteTask = (index)=>{\n  const newList = toDolist.filter((item,i)=> i!==index);\n  updateToDoList(newList)\n  }\n  \n  const mark = (index)=>{\n    const list = [...toDolist];\n    list[index].isComplete =  !list[index].isComplete;\n    updateToDoList(list)\n    }\n\n  return (\n    <div className=\"app-background\">\n    <p className=\" heading-text\"> To do List</p>\n    <div className=\"task-container\">\n    <div>\n    <input className=\"text-input\" value={taskInput} onKeyDown={inputKeyDown} onChange={(event)=>updateTaskInput(event.target.value)} /> \n    <button className=\"add-button\" onClick={addNote}> ADD </button>\n    </div>\n   {toDolist?.length? toDolist.map((toDoObject,index)=>\n   \n     <ListItem index={index} itemData={toDoObject} deleteTask={deleteTask} mark={mark}/>): <p className=\"no-item-text\">üìå No Task added</p>} \n    </div>\n    <p className=\"footer-text\">Sabar_I ‚ù§Ô∏è</p>\n    </div>\n  );\n}\n\n\nfunction ListItem(props){\n  return(\n    <div className=\"list-item row jc-space-between\">\n      <span className={props.itemData.isComplete?\"task-complete\":\"\"} \n         onClick={() => props.mark(props.index)}>{props.itemData.isComplete ? `‚úÖ ` : ''}&nbsp;{props.itemData?.description}</span>\n     <img src={trashIcon} className=\"delete-icon\" onClick={()=> props.deleteTask(props.index)} alt=\"/\"/>\n    </div>\n  )\n  }\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}